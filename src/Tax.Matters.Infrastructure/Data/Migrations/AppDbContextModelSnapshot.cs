// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tax.Matters.Infrastructure.Data;

#nullable disable

namespace Tax.Matters.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tax.Matters.Domain.Entities.AuditLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecordId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.FlatValueIncomeTax", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncomeTaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Threshold")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ThresholdRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("IncomeTaxId")
                        .IsUnique();

                    b.ToTable("FlatValueIncomeTax", t =>
                        {
                            t.HasCheckConstraint("CK_FlatValueIncomeTax_ThresholdRate", "[ThresholdRate] <= 100.00");
                        });
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.IncomeTax", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FlatRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("IncomeTax", t =>
                        {
                            t.HasCheckConstraint("CK_IncomeTax_FlatRate", "[FlatRate] <= 100.00");
                        });
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.PostalCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IncomeTaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IncomeTaxId");

                    b.ToTable("PostalCode");
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.ProgressiveIncomeTax", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("IncomeTaxId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("MaximumIncome")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumIncome")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("IncomeTaxId");

                    b.HasIndex("MinimumIncome", "IncomeTaxId")
                        .IsUnique();

                    b.ToTable("ProgressiveIncomeTax", t =>
                        {
                            t.HasCheckConstraint("CK_ProgressiveIncomeTax_MinimumIncome_vs_MaximumIncome", "[MaximumIncome] IS NULL OR ([MinimumIncome] < [MaximumIncome])");

                            t.HasCheckConstraint("CK_ProgressiveIncomeTax_Rate", "[Rate] <= 100.00");
                        });
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.TaxCalculation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AnnualIncome")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCodeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PostalCodeId");

                    b.ToTable("TaxCalculation", t =>
                        {
                            t.HasCheckConstraint("CK_TaxCalculation_AnnualIncome", "[AnnualIncome] >= 0.00");
                        });
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.FlatValueIncomeTax", b =>
                {
                    b.HasOne("Tax.Matters.Domain.Entities.IncomeTax", "IncomeTax")
                        .WithOne("FlatValue")
                        .HasForeignKey("Tax.Matters.Domain.Entities.FlatValueIncomeTax", "IncomeTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomeTax");
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.PostalCode", b =>
                {
                    b.HasOne("Tax.Matters.Domain.Entities.IncomeTax", "IncomeTax")
                        .WithMany()
                        .HasForeignKey("IncomeTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomeTax");
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.ProgressiveIncomeTax", b =>
                {
                    b.HasOne("Tax.Matters.Domain.Entities.IncomeTax", "IncomeTax")
                        .WithMany("ProgressiveTaxTable")
                        .HasForeignKey("IncomeTaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomeTax");
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.TaxCalculation", b =>
                {
                    b.HasOne("Tax.Matters.Domain.Entities.PostalCode", "PostalCode")
                        .WithMany()
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostalCode");
                });

            modelBuilder.Entity("Tax.Matters.Domain.Entities.IncomeTax", b =>
                {
                    b.Navigation("FlatValue");

                    b.Navigation("ProgressiveTaxTable");
                });
#pragma warning restore 612, 618
        }
    }
}
